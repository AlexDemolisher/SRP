class "se_sim_faction"	(cse_alife_smart_zone)

function se_sim_faction:__init (section) super (section)
--	self.sid = math.random(100000)
	self.squad_population_max = 0
	self.resource_level = 0	
	self.glory_level = 0
	self.absolute_power = 0
	self.squad_target_cache = {}
	self.spawn_by_resource = {}
	self.spawn_by_level = {}
	self.squads_by_glory = {}
	self.community_player = false
	self.expansion_level = {}
	self.current_expansion_level = 0
	self.secondary_targets = {}
	self.random_tasks = {}
	self.current_attack_quantity = {}
	self.squads = {}
	self.start_position_filled = false
	self.init_squad_queue = {}
	self.precondition_targets = {}
end

function se_sim_faction:read_params()

	local ini = self:spawn_ini()
	local get_string = utils.cfg_get_string

	self.board = sim_board.get_sim_board()
	self.player_name = get_string(ini, "faction", "name", self, true, "")

	local setting_ini = ini_file(get_string(ini, "faction", "settings", self, true, ""))
	self.setting_ini = setting_ini

	local i = 0
	local section = "0"
	local T = self.spawn_by_resource
	while setting_ini:line_exist("spawn_by_resource", section) do
		T[i] = utils.parse_spawns(get_string(setting_ini, "spawn_by_resource", section, self, true, ""))
		i = i + 1
		section = tostring(i)
	end

	local result, id, value = "", "", ""
	local n = setting_ini:line_count("spawn_by_level")

	T = self.spawn_by_level
	for i = 0, n - 1 do
		result, id, value = setting_ini:r_line("spawn_by_level", i, "", "")
		T[id] = utils.parse_spawns(value)
	end

	i = 0
	section = "glory_0"
	T = self.squads_by_glory
	while setting_ini:line_exist("settings", section) do
		T[i] = utils.cfg_get_number(setting_ini, "settings", section, self, true)
		i = i + 1
		section = "glory_"..i
	end

	i = 0
	section = "expansion_0"
	T = self.expansion_level
	while setting_ini:section_exist(section) do

		local t = {}

		t.id				= i
		t.section			= section
		t.base_squad_number		= xr_logic.parse_condlist(self, "sim_faction", "base_squad_number", get_string(setting_ini, section, "base_squad_number", self, true, ""))

		t.respawn_idle_time		= utils.cfg_get_number(setting_ini, section, "respawn_idle_time", self, false, 30) * 60
		local t_respawn_hours		= {}
		t.respawn_hours			= t_respawn_hours

		local respawn_hours		= parse_names(get_string(setting_ini, section, "respawn_hours", self, false, "", "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23"))

 		for k, v in pairs (respawn_hours) do
 			t_respawn_hours[v] = true
 		end

		t.war_target_title		= get_string(setting_ini, section, "war_target_title", self, false, "", "")
		t.war_stage_icon		= get_string(setting_ini, section, "war_stage_icon", self, false, "", "")
		t.war_stage_icon_complete	= get_string(setting_ini, section, "war_stage_icon_complete", self, false, "", "")
		t.war_stage_icon_hint		= get_string(setting_ini, section, "war_stage_icon_hint", self, false, "", "")
		t.war_stage_icon_hint_complete	= get_string(setting_ini, section, "war_stage_icon_hint_complete", self, false, "", "")

		t.precondition_power		= utils.cfg_get_number(setting_ini, section, "precondition_power", self, false, 0)
		t.precondition_target		= utils.parse_names(get_string(setting_ini, section, "precondition_target", self, false, "", ""))
		t.precondition_target_no_task	= utils.parse_names(get_string(setting_ini, section, "precondition_target_no_task", self, false, "", ""))
		t.precondition_target_eliminate	= utils.parse_names(get_string(setting_ini, section, "precondition_target_eliminate", self, false, "", ""))
--		t.precondition_target_order	= get_string(setting_ini, section, "precondition_target_order", self, false, "", "free")
		t.precondition_actor_in_faction	= utils.cfg_get_bool(setting_ini, section, "precondition_actor_in_faction", self, false, false)

		t.precondition_cond		= xr_logic.parse_condlist(self, "sim_faction", "precondition_cond", get_string(setting_ini, section, "precondition_cond", self, false, "", "true"))

		t.level_up_snd			= get_string(setting_ini, section, "level_up_snd", self, false, "")
		t.level_down_snd		= get_string(setting_ini, section, "level_down_snd", self, false, "")

		i = i + 1

--		table.insert(self.expansion_level, t)	-- faster to use the method below
		T[i] = t

		section = "expansion_"..i
	end

	table.sort(T, function(a, b) return a.id < b.id end)

	if setting_ini:section_exist("secondary_targets") then
		n = setting_ini:line_count("secondary_targets")
		T = self.secondary_targets
		for i = 0, n - 1 do
			result, id, value = setting_ini:r_line("secondary_targets", i, "", "")
			T[id] = xr_logic.parse_condlist(self, "sim_faction", "secondary_targets", value)
		end
	end
end

function se_sim_faction:on_register()

	cse_alife_smart_zone.on_register(self)

--	self:show()

	local board = self.board

	board:register_player(self)

	local our_faction = self.player_name

	if our_faction == "monster" or our_faction == "monolith" then
		self.brain = sim_faction_brain_mutant.faction_brain_mutant(self)
	else
		self.brain = sim_faction_brain_human.faction_brain_human(self)
	end

	self.brain:calculate_expansion_targets()

	local faction_squads = self.squads
	local board_squads = board.squads
	local c = #faction_squads
	for k, squad in pairs (self.init_squad_queue) do
--		table.insert(self.squads, squad)
		c = c + 1
		faction_squads[c] = squad
		squad:init_squad_on_load()
		board_squads[squad.squad_id] = squad
	end

	self:fill_start_position()			-- executes once at the start of every new game

	for k, v in pairs (faction_squads) do		-- loads all squad map spots on initialization
		v:refresh()
	end

	local precondition_targets = self.precondition_targets
	local smarts_by_name = board.smarts_by_names
	for k, expansion in pairs (self.expansion_level) do
		for kk, target_name in pairs (expansion.precondition_target) do
			precondition_targets[smarts_by_name[target_name].id] = true
		end
	end
end

function se_sim_faction:on_unregister()
	cse_alife_smart_zone.on_unregister(self)
end

function se_sim_faction:fill_start_position()

	if self.start_position_filled == true then
		return
	end

	self.start_position_filled = true

	local setting_ini = self.setting_ini
	if not setting_ini:section_exist("start_position") then
		return
	end

	local n = setting_ini:line_count("start_position")
	local board = self.board
	local smarts_by_name = board.smarts_by_names
	local squad_ltx = sim_board.squad_ltx
	local our_faction = self.player_name
	local parse_names = utils.parse_names
	local get_bool = utils.cfg_get_bool
	local sim_squad_scripted = sim_squad_scripted.sim_squad_scripted

	for i = 0, n - 1 do
		local result, id, value = setting_ini:r_line("start_position", i, "", "")
		local smrt_names = parse_names(value)
		for k, v in pairs (smrt_names) do
			local smart = smarts_by_name[v]
			if smart == nil then
				abort("[sim_faction.fill_start_position]: Smart '%s' is not a valid start position for faction '%s'.", tostring(v), tostring(our_faction))
				return
			end
			local squad
			local is_autogenerated_id = get_bool(squad_ltx, id, "auto_id", self, false, false)
			if is_autogenerated_id then
				squad = board:create_squad(our_faction, sim_squad_scripted, smart, nil, id)
			else
				squad = board:create_squad(our_faction, sim_squad_scripted, smart, id)
			end
			board:enter_smart(squad, smart.id)
		end
	end
end

function se_sim_faction:update()

	cse_alife_smart_zone.update(self)

	self:calculate_absolute_power()

	local current_expansion_level = self.expansion_level[self.current_expansion_level]
	if current_expansion_level == nil then
		return
	end

	if db.actor then
		local board = self.board
		if board.simulation_started then
			if current_expansion_level.respawn_hours[tostring(level.get_time_hours())] == true then
				local last_spawn_time, current_game_time = self.last_spawn_time, game.get_game_time()
				if last_spawn_time == nil or current_game_time:diffSec(last_spawn_time) >= current_expansion_level.respawn_idle_time then
					local squad_population = #self.squads
					local squad_population_max = self.squad_population_max
					local is_spawned = false
					local sim = alife()
					if squad_population < squad_population_max then
						local spawn_smart
--						for i = squad_population, squad_population_max do		-- suppose squad_population = 3, squad_population_max = 5; then with GSC's code, we spawn squads for i = 3, 4, and 5 -- that makes 3(!) squads, which is 1 too many!
						for i = 1, (squad_population_max - squad_population) do
							spawn_smart = board:get_spawn_smart(self)
							if spawn_smart ~= nil then
								local squad = board:create_squad(self.player_name, sim_squad_generic.sim_squad_generic, spawn_smart)
								board:enter_smart(squad, spawn_smart.id)
								squad:update()
								local se_npc
								for k in pairs (squad.squad_npc) do
									se_npc = sim:object(k)
									board:setup_squad_and_group(se_npc)
								end
								squad:refresh()
								is_spawned = true
							else
								break
							end
						end
					end
					if is_spawned == false then
						self.brain:calculate_expansion_targets()
					end
					self.last_spawn_time = current_game_time
				end
			end
		end

		if self.community_player == true then
			if self.brain.reset_actor_tasks ~= nil then
				if self.target_smart_value == nil then
					self.brain:calculate_expansion_targets()
				end
				self.brain:reset_actor_tasks()
			end
----------------------------------------------------------------------------------------------------------------------------------------- SRP >>>
			local last_update_time = self.last_update_time
			if last_update_time == nil then
				self.last_update_time = game.get_game_time()
			else
				local current_game_time = game.get_game_time()
				if current_game_time:diffSec(last_update_time) >= 150 then
					if board.simulation_started then
						if self.target_smart_value ~= nil then
							for target_smart_id, target_smart_data in pairs (self.target_smart_value) do
								if target_smart_data.advance_point == true then				-- for each advance_point of our current expansion level:
									local precond_target_obj = target_smart_data.smart
									local our_faction = self.player_name
									if precond_target_obj.player_name ~= our_faction then		-- if the advance_point is not yet captured by us:
										local we_are_moving_to_target = false
										for k, squad in pairs (self.squads) do
											local current_action = squad.current_action
											if current_action ~= nil then
												if current_action.dest_smrt_id == target_smart_id or (current_action.name == "attack_point" and squad.assigned_target_smart_id == target_smart_id) then
--													dbgmsg("Squad "..squad.squad_id.." is already going to the target: "..smart_names.get_smart_terrain_name(precond_target_obj))
													we_are_moving_to_target = true
													break
												end
											end
										end
										if we_are_moving_to_target == false then			-- if we are not moving to it:
											local avail_squads = {}
											local c = 0
											local GG = game_graph()
											for k, squad in pairs (self.squads) do				-- for each of our squads:
												local squad_smart_id = squad.smart_id
												local squad_smart_data = board.smarts[squad_smart_id]
												local try_to_assign_a_squad = false
												if squad_smart_data.stayed_squad_quan >= 2 then		-- if at least one other squad on same smart, or:
													try_to_assign_a_squad = true
												else
													if self.precondition_targets[squad_smart_id] == nil then	-- if squad is not on a precondition_target for any expansion level:
														try_to_assign_a_squad = true
													end
												end
												if try_to_assign_a_squad == true then
													if not squad:get_script_target() then				-- if squad has no scripted target:
														local current_action = squad.current_action
														if current_action ~= nil then
															if current_action.name == "stay_point" and current_action.next_point_id == nil and self.squad_target_cache[squad_id] ~= target_smart_id then	-- if squad is idle and not blocked and not trying to get to the advance_point:
																local level_cluster = sim_board.sim_level_cluster
																local squad_smart_obj = squad_smart_data.smrt
																if level_cluster[squad_smart_obj.smart_level] == level_cluster[precond_target_obj.smart_level] then					-- if squad is on a suitable level:
																	c = c + 1
																	avail_squads[c] = {														-- insert squad into the avail_squads table
																		squad = squad,
--																		squad_smart_id = squad_smart_id,
																		squad_id = squad.squad_id,
																		dist_to_target = GG:vertex(precond_target_obj.m_game_vertex_id):game_point():distance_to(GG:vertex(squad_smart_obj.m_game_vertex_id):game_point())
																	}
																end
															end
														end
													end
												end
											end
											if c > 0 then												-- if there are squads available to be assigned to the advance_point:
												table.sort(avail_squads, function(a, b) return a.dist_to_target < b.dist_to_target end)		-- sort the squads in order of distance to target
--												for i = 1, #avail_squads do
--													dbglog(i..": "..avail_squads[i].squad_id..", "..avail_squads[i].dist_to_target)
--												end
												self.squad_target_cache[avail_squads[1].squad_id] = target_smart_id				-- assign the nearest squad to the target
												local assigned_squad = avail_squads[1].squad
												assigned_squad.assigned_target_smart_id = target_smart_id
												if assigned_squad.sim_combat_id ~= nil then
													board.smarts[assigned_squad.sim_combat_id].smrt.combat_manager:unregister_squad(assigned_squad)
												end
												if assigned_squad.current_action ~= nil then
													assigned_squad.current_action:finalize()
													assigned_squad.current_action = nil
												end
												assigned_squad:get_next_action()
--												dbgmsg("Assigned squad "..avail_squads[1].squad_id.." on "..smart_names.get_smart_terrain_name(board.smarts[avail_squads[1].squad_smart_id].smrt).." to "..smart_names.get_smart_terrain_name(precond_target_obj))
											end
										end
									end
								end
							end
						end
					end
					self.last_update_time = current_game_time
				end
			end
----------------------------------------------------------------------------------------------------------------------------------------- <<< SRP
		end
	end

--	self:refresh()
end

function se_sim_faction:get_spawn_section(level_name, custom_resource)

	local resource_spawn_data
	if custom_resource ~= nil then
		resource_spawn_data = self.spawn_by_resource[custom_resource]
	else
		resource_spawn_data = self.spawn_by_resource[self.resource_level]
	end

	if resource_spawn_data == nil then
		local n = self.resource_level
		while n >= 0 do
			resource_spawn_data = self.spawn_by_resource[n]
			if resource_spawn_data ~= nil then
				break
			end
			n = n - 1
		end
		if resource_spawn_data == nil then
			abort("[sim_faction.get_spawn_section]: Spawn data for faction '%s' and resource level '%s' is missing.", self:name(), tostring(custom_resource or self.resource_level))
		end
	end

	local level_spawn_data = self.spawn_by_level[level_name]

	if level_spawn_data == nil then
		abort("[sim_faction.get_spawn_section]: Spawn data for faction '%s' and level '%s' is missing.", self:name(), tostring(level_name))
	end

	local spawn_data, c = {}, 0
	for k, v in pairs (resource_spawn_data) do
		for kk, vv in pairs (level_spawn_data) do
			if v.section == vv.section then
--				table.insert(spawn_data, {section = v.section, prob = v.prob * vv.prob})	-- table.insert is slow in loops, use the method below instead
				c = c + 1
				spawn_data[c] = {section = v.section, prob = v.prob * vv.prob}
				break
			end
		end
	end

	local sum = 0
	for k, v in pairs (spawn_data) do
		sum = sum + v.prob
	end

	local spawn_section = nil

	sum = math.random(0, sum)
	for k, v in pairs (spawn_data) do
		sum = sum - v.prob
		if sum <= 0 then
			spawn_section = v.section
			break
		end
	end

	if spawn_section == nil then
		abort("[sim_faction.get_spawn_section]: Spawn section for faction '%s' and resource level '%s' is missing.", self:name(), tostring(custom_resource or self.resource_level))
	end

	return spawn_section
end

function se_sim_faction:calculate_total_squads()

	local total_squad = self.squads_by_glory[self.glory_level]

	if total_squad == nil then
		local n = 0
		while n < self.glory_level do
			total_squad = self.squads_by_glory[n]
			n = n + 1
		end
		if total_squad == nil then
			abort("[sim_faction.calculate_total_squads]: Squad data for faction '%s' and glory level '%s' is missing.", self:name(), tostring(self.glory_level))
		end
	end

	local exp_squads = tonumber(xr_logic.pick_section_from_condlist(db.actor, self, self.expansion_level[self.current_expansion_level].base_squad_number))

	self.squad_population_max = exp_squads + total_squad
end

function se_sim_faction:faction_brain_update(after_load)
	if after_load ~= true then
		self.brain:calculate_current_expansion()
	else
		self.brain:calculate_expansion_targets()
	end
end

-- function se_sim_faction:give_squad_task()
-- end

function se_sim_faction:calculate_squad_tasks()

	self.squad_target_cache = {}
	local squad_need_task = {}
	local distance_table = {}

	for k, target_smart in pairs (self.target_smart_value) do					-- for all registered target smarts, set number of squads assigned to that smart to 0
		target_smart.num = 0
	end

	local c = 0
	local sort, script_target = table.sort
	for k, squad in pairs (self.squads) do								-- for all squads:
		script_target = squad:get_script_target()
		if script_target ~= nil then
			self.squad_target_cache[squad.squad_id] = script_target				-- if squad has script target then assign squad to that target and
			if self.target_smart_value[script_target] ~= nil then							-- if script target is a registered target smart then
				self.target_smart_value[script_target].num = self.target_smart_value[script_target].num + 1	-- increase number of squads going to that target smart by 1
			end
		else
--			table.insert(squad_need_task, squad)							-- else insert this squad to table squad_need_task
			c = c + 1
			squad_need_task[c] = squad
--			dbglog("Inserted "..game.translate_string(self.player_name).." squad with ID "..tostring(squad.squad_id).." to squad_need_task.")
		end
	end

	c = 0

	for k, target_smart in pairs (self.target_smart_value) do					-- for all registered target smarts:

		local t = {}
		local num = 0

		for kk, squad in pairs (squad_need_task) do						-- for all squads in need of task (i.e. any squad not assigned to a script target):

			if squad.smart_id == nil then
				abort("[sim_faction.calculate_squad_tasks]: Squad with ID '%s' has no registered source smart.", tostring(squad.squad_id))
				return
			end

			local is_stay = false
			local squad_location

			if squad.current_action == nil or squad.current_action.name == "stay_point" then	-- if squad is idling around then:
				is_stay = true
				squad_location = self.board.smarts[squad.smart_id].smrt				-- 'squad_location' = squad's current smart
			else
				squad_location = self.board.smarts[squad.current_action.dest_smrt_id].smrt	-- else 'squad_location' = squad's target smart (prevents squad from being re-assigned on way there)
			end

			if sim_board.sim_level_cluster[squad_location.smart_level] == sim_board.sim_level_cluster[target_smart.smart.smart_level] then	-- if registered target smart is in the same level cluster as squad's 'squad_location' then

				local gr_dist = utils.graph_distance(squad_location.m_game_vertex_id, target_smart.smart.m_game_vertex_id)

				if is_stay == false then
					gr_dist = gr_dist + 1							-- if squad is not idling around then increase graph distance between
				end										-- registered target smart and squad's 'squad_location' by 1

--				table.insert(t, {squad_id = squad.squad_id, squad = squad, dist = gr_dist})	-- add squad info to table 't'

				num = num + 1
				t[num] = {squad_id = squad.squad_id, squad = squad, dist = gr_dist}
			end
		end

		if num > 0 then										-- if at least one squad is in the same level cluster as registered target smart then
			sort(t, function(a, b) return a.dist < b.dist end)				-- sort 't' by squad distance to registered target smart in ascending order
--			table.insert(distance_table, {target_smart = target_smart, squads = t})		-- and add {target_smart, squad infos from 't'} to distance_table
			c = c + 1
			distance_table[c] = {target_smart = target_smart, squads = t}
		end
	end
--[[													-- this block-commented code is obsolete but has been kept for reference
	local function clear_squad(squad_id)
		local remove_table, del_id = {}
		for k, v in pairs (distance_table) do
			del_id = nil
			for kk, vv in pairs (v.squads) do
				if vv.squad_id == squad_id then
					del_id = kk							-- if this squad is in distance_table, make it unassignable for every smart
					break
				end
			end

			table.remove(distance_table[k].squads, del_id)

			if #distance_table[k].squads < 1 then
				table.insert(remove_table, k)
			end
		end

		sort(remove_table, function(a, b) return a > b end)
		for k, v in pairs (remove_table) do
			table.remove(distance_table, v)							-- remove from distance_table any smart for which no squads left available
		end
	end

	local v1, v1_squads1, tmp_squad_id

	while #distance_table > 0 do

		if distance_table[1].squads[1] == nil then
			break
		else
			sort(distance_table, function(a, b) return a.squads[1].dist < b.squads[1].dist end)
		end

		v1 = distance_table[1]
		v1_squads1 = v1.squads[1]
		tmp_squad_id = v1_squads1.squad_id

		if v1.target_smart.num >= v1.target_smart.cap then
			table.remove(distance_table, 1)
		else
			self.squad_target_cache[tmp_squad_id] = v1.target_smart.smart_id
			v1.target_smart.num = v1.target_smart.num + 1
			if v1.target_smart.num >= v1.target_smart.cap then
				table.remove(distance_table, 1)
			end

			clear_squad(tmp_squad_id)
		end
	end
]]
	local rem, tmp_squad_id = table.remove

	while #distance_table > 0 do									-- while there are elements in distance_table:

--		if tostring(self.player_name) == "csky" then
--			dbglog("Iteration time is "..tostring(time_global())..".")
--		end

		sort(distance_table, function(a, b) return a.squads[1].dist < b.squads[1].dist end)	-- sort distance_table in ascending order by distance between smart and closest squad

		tmp_squad_id = distance_table[1].squads[1].squad_id					-- first element in table will be smart-squad pair with least distance between them
													-- often that means smart-squad pair with *no* distance between them
													-- i.e. pair wherewith squad is already on smart

		self.squad_target_cache[tmp_squad_id] = distance_table[1].target_smart.smart_id		-- assign nearest squad to smart in first element of distance_table

--		if tostring(self.player_name) == "csky" then
--			dbglog("Assigned "..game.translate_string(self.player_name).." squad with ID "..tostring(tmp_squad_id).." to ["..game.translate_string("st_name_"..distance_table[1].target_smart.smart:name()).."].")
--		end

		distance_table[1].target_smart.num = distance_table[1].target_smart.num + 1		-- increase number of squads assigned to it by 1
		if distance_table[1].target_smart.num >= distance_table[1].target_smart.cap then	-- if number of squads assigned to it now meets or exceeds its capacity,

--			if tostring(self.player_name) == "csky" then
--				dbglog("Removed ["..game.translate_string("st_name_"..distance_table[1].target_smart.smart:name()).."] from distance_table since its capacity ("..tostring(distance_table[1].target_smart.cap)..") is saturated ("..tostring(distance_table[1].target_smart.num)..").")
--			end

			rem(distance_table, 1)								-- remove it from distance_table
		end

		for i = #distance_table, 1, -1 do
			for j = #distance_table[i].squads, 1, -1 do
				if distance_table[i].squads[j].squad_id == tmp_squad_id then
--					if tostring(self.player_name) == "csky" then
--						dbglog("Made "..game.translate_string(self.player_name).." squad with ID "..tostring(tmp_squad_id).." unassignable to ["..game.translate_string("st_name_"..distance_table[i].target_smart.smart:name()).."].")
--					end

					rem(distance_table[i].squads, j)				-- remove the assigned squad wherever it occurs in distance_table
					break
				end
			end
			if #distance_table[i].squads == 0 then
--				if tostring(self.player_name) == "csky" then
--					dbglog("Removed ["..game.translate_string("st_name_"..distance_table[i].target_smart.smart:name()).."] from distance_table since no "..game.translate_string(self.player_name).." squad is assignable to it.")
--				end

				rem(distance_table, i)							-- remove any smarts from distance_table to which no squad is assignable
			end
		end
	end
end

function se_sim_faction:register_squad(squad)
--	table.insert(self.squads, squad)
	self.squads[#self.squads + 1] = squad		-- more efficient
end

function se_sim_faction:unregister_squad(squad)
	local delete_id = nil
	for k, v in pairs (self.squads) do
		if v.squad_id == squad.squad_id then
			delete_id = k
			break
		end
	end
	if delete_id == nil then
		abort("[sim_faction.unregister_squad]: Cannot delete squad with ID '%s' because it does not exist.", tostring(squad.squad_id))
	end
	self:clear_squad_target(squad)
	table.remove(self.squads, delete_id)
end

function se_sim_faction:calculate_absolute_power()

	self.npc_count = 0
	self.npc_power = 0
	self.absolute_power = 0

	for k, v in pairs (self.squads) do
		self.npc_count = self.npc_count + v.npc_count
		self.absolute_power = self.absolute_power + v.squad_power
	end
end

function se_sim_faction:get_absolute_power()
	return self.absolute_power
end

function se_sim_faction:get_relative_power()

	self:calculate_absolute_power()

	local rel_enemy = sim_board.sim_fight[self.player_name]

	if rel_enemy == nil then
		return self.absolute_power * 0.0001
	end

	rel_enemy = self.board.players[rel_enemy]
	if rel_enemy == nil then
		return self.absolute_power * 0.0001
	end

	rel_enemy:calculate_absolute_power()

	local enemy_power = rel_enemy:get_absolute_power()
	if enemy_power == 0 then
		return 1
	end

	return self.absolute_power / (enemy_power + self.absolute_power)
end

function se_sim_faction:get_war_target_title()
	local exp_lvl = self.expansion_level[self.current_expansion_level]
	if exp_lvl then
		return game.translate_string(exp_lvl.war_target_title)
	else
		return ""
	end
end

function se_sim_faction:get_war_stage_icon(expansion)
	if expansion >= self.current_expansion_level then
		return self.expansion_level[expansion].war_stage_icon
	else
		return self.expansion_level[expansion].war_stage_icon_complete
	end
end

function se_sim_faction:get_war_stage_hint(expansion)
	if expansion >= self.current_expansion_level then
		return self.expansion_level[expansion].war_stage_icon_hint
	else
		return self.expansion_level[expansion].war_stage_icon_hint_complete
	end
end

function se_sim_faction:get_war_target_descr()

	if not self.target_smart_value then
		return ""
	end

	local capture_descr = ""
	local defend_descr = ""
	local capture_exist = false
	local defend_exist = false

	for k, v in pairs (self.target_smart_value) do
		if v.no_task ~= true then
			if v.smart.player_name ~= self.player_name then
				if v.num > 0 then
					if capture_exist == false then
						capture_descr = capture_descr..game.translate_string("ui_st_capture").." "
						capture_exist = true
					else
						capture_descr = capture_descr..", "
					end
					capture_descr = capture_descr..smart_names.get_smart_terrain_name(v.smart)
				end
			else
				if defend_exist == false then
					defend_descr = defend_descr..game.translate_string("ui_st_defend").." "
					defend_exist = true
				else
					defend_descr = defend_descr..", "
				end
				defend_descr = defend_descr..smart_names.get_smart_terrain_name(v.smart)
			end
		end
	end

	if defend_exist == true then
		capture_descr = capture_descr.."\\n\\n"..defend_descr
	end

	return capture_descr
end

function se_sim_faction:get_war_state_icon(stage)
	local current_expansion_level = self.expansion_level[stage]
	if current_expansion_level == nil then
		return ""
	end
	if self.current_expansion_level > stage then
		return current_expansion_level.war_stage_icon_complete
	else
		return current_expansion_level.war_stage_icon
	end
end

function se_sim_faction:get_war_state_title(stage)
	local current_expansion_level = self.expansion_level[stage]
	if current_expansion_level == nil then
		return ""
	end
	return current_expansion_level.war_stage_icon_hint
end
--[[
function se_sim_faction:get_player_props()

	local props =

	self.player_name .. "\\n" ..
	"value = " .. tostring(self:get_relative_power()) .. "\\n" ..
	"power = " .. tostring(self:get_absolute_power()) .. "\\n" ..
	"npc = " .. tostring(self.npc_count) .. "\\n" ..
	"expansion = " .. tostring(self.current_expansion_level) .. "\\n" ..
	"max_pop = " .. tostring(self.squad_population_max) .. "("..tostring(#self.squads)..")\\n" ..
	"resource = " .. tostring(self.resource_level) .. "\\n" ..
	"glory = " .. tostring(self.glory_level) .. "\\n"

	return props
end

function se_sim_faction:show()
	if (_G.dev_debug) then
		level.map_add_object_spot(self.id, "alife_presentation_faction_"..self.player_name, self:get_player_props())
	end
end

function se_sim_faction:refresh()
	if (_G.dev_debug) then
		level.map_change_spot_hint(self.id, "alife_presentation_faction_"..self.player_name, self:get_player_props())
	end
end

function se_sim_faction:hide()
	if (_G.dev_debug) then
		level.map_remove_object_spot(self.id, "alife_presentation_faction_"..self.player_name)
	end
end
]]
function se_sim_faction:clear_squad_target(squad)
	self.squad_target_cache[squad.squad_id] = nil
end

function se_sim_faction:find_target(squad)
	return self.squad_target_cache[squad.squad_id]
end

function se_sim_faction:STATE_Write(packet)

	cse_alife_smart_zone.STATE_Write(self, packet)

	set_save_marker(packet, "save", false, "se_sim_faction")

	packet:w_bool(self.community_player)
	packet:w_bool(self.start_position_filled)
	packet:w_u8(self.current_expansion_level)

	utils.w_CTime(packet, self.last_spawn_time)

	local n = 0
	for k in pairs (self.squad_target_cache) do
		n = n + 1
	end

	packet:w_u8(n)

	for k, v in pairs (self.squad_target_cache) do
		packet:w_stringZ(k)
		packet:w_u16(tonumber(v))	-- smart IDs should always be number types so coercion should not be necessary here
	end

	n = 0
	for k in pairs (self.random_tasks) do
		n = n + 1
	end

	packet:w_u8(n)

	for k, v in pairs (self.random_tasks) do
		packet:w_u16(k)
		packet:w_u16(v)
	end

	n = 0
	for k in pairs (self.current_attack_quantity) do
		n = n + 1
	end

	packet:w_u8(n)

	for k, v in pairs (self.current_attack_quantity) do
		packet:w_u16(k)
		packet:w_u8(v)
	end

	n = 0
	for k in pairs (self.squads) do
		n = n + 1
	end

	packet:w_u16(n)

	for k, v in pairs (self.squads) do
		packet:w_stringZ(v.squad_id)
		packet:w_stringZ(tostring(v.settings_id))	-- v.settings_id might be nil so this gets coerced into a string
		if v.name == "sim_squad_scripted" then
			packet:w_bool(true)
		else
			packet:w_bool(false)
		end
		v:save(packet)
	end

	set_save_marker(packet, "save", true, "se_sim_faction")
end

function se_sim_faction:STATE_Read(packet, size)

	cse_alife_smart_zone.STATE_Read(self, packet, size)

	if editor() then
		return
	end

	self:read_params()

	set_save_marker(packet, "load", false, "se_sim_faction")

	self.community_player = packet:r_bool()
	self.start_position_filled = packet:r_bool()
	self.current_expansion_level = packet:r_u8()

	self.last_spawn_time = utils.r_CTime(packet)

--	local T = {}
--	self.squad_target_cache = T
	local T = self.squad_target_cache

	local n, id, value = packet:r_u8()
	for i = 1, n do
		id = packet:r_stringZ()
		value = packet:r_u16()
		T[id] = value
	end

--	T = {}
--	self.random_tasks = T
	T = self.random_tasks

	n = packet:r_u8()
	for i = 1, n do
		id = packet:r_u16()
		value = packet:r_u16()
		T[id] = value
	end

--	T = {}
--	self.current_attack_quantity = T
	T = self.current_attack_quantity

	n = packet:r_u8()
	for i = 1, n do
		id = packet:r_u16()
		value = packet:r_u8()
		T[id] = value
	end

--	self.squads = {}

--	T = {}
--	self.init_squad_queue = T
	T = self.init_squad_queue

	local board = self.board
	local our_faction = self.player_name
	local sim_squad_scripted = sim_squad_scripted.sim_squad_scripted
	local sim_squad_generic = sim_squad_generic.sim_squad_generic
	local squad_id, settings_id, squad, flag

	n = packet:r_u16()
	for i = 1, n do
		squad_id = packet:r_stringZ()
		settings_id = packet:r_stringZ()
		if settings_id == "nil" then
			settings_id = nil
		end
		flag = packet:r_bool()
		if flag == true then
			squad = sim_squad_scripted(board, our_faction, squad_id, settings_id)
		else
			squad = sim_squad_generic(board, our_faction, squad_id, settings_id)
		end
		squad:load(packet)
--		table.insert(self.init_squad_queue, squad)
		T[i] = squad
	end

	set_save_marker(packet, "load", true, "se_sim_faction")
end

function get_current_expansion(faction_id)
	local player = sim_board.get_sim_board().players[faction_id]
	if player == nil then
		abort("[sim_faction.get_current_expansion]: There is no faction with ID '%s'.", tostring(faction_id))
	end
	return player.expansion_level[player.current_expansion_level].section
end

function get_current_resource(faction_id)
	local player = sim_board.get_sim_board().players[faction_id]
	if player == nil then
		abort("[sim_faction.get_current_resource]: There is no faction with ID '%s'.", tostring(faction_id))
	end
	return player.resource_level
end
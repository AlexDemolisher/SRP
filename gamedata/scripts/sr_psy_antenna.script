-- NatVac 03.04.2013: Prevented audio and visual effector intensity doubling after save/reload (imported from the ZRP by Decane).
-- Decane 20.11.2014: Also prevented hit intensity doubling after save/reload.

class "PsyAntenna"

function PsyAntenna:__init()

-- ----------------------------------------------------------------------------------------
-- settings
-- ----------------------------------------------------------------------------------------
-- phantom gen
-- ----------------------------------------------------------------------------------------

	self.phantom_max 				= 8
	self.phantom_spawn_probability			= 0
	self.phantom_spawn_radius			= 30
	self.phantom_spawn_height			= 2.5
	self.phantom_fov				= 45
	-- antenna
	self.hit_amplitude				= 1

-- ----------------------------------------------------------------------------------------
-- class variables initialize
-- ----------------------------------------------------------------------------------------

--	self.eff_time					= 0	-- nv130403 not used
	self.hit_time					= 0
	self.phantom_time				= 0
	self.intensity_inertion				= 0.05
	self.hit_intensity				= 0
	self.sound_intensity				= 0
	self.sound_intensity_base			= 0
	self.postprocess_count				= 0
	self.postprocess				= {}

-- ----------------------------------------------------------------------------------------
-- sound
-- ----------------------------------------------------------------------------------------

	self.sound_initialized				= false
	self.sound_obj_right, self.sound_obj_left	= sound_object("characters_voice\\scenario\\yantar\\psy_voices_1_r"), sound_object("characters_voice\\scenario\\yantar\\psy_voices_1_l") 
	self.sound_obj_left.volume			= self.sound_intensity
	self.sound_obj_right.volume			= self.sound_intensity
	self.snd_volume					= level.get_snd_volume()
	self.mute_sound_threshold			= 0
	self.max_mumble_volume				= 10
end

function PsyAntenna:destroy()
	self.sound_obj_right:stop()
	self.sound_obj_left:stop()
	level.set_snd_volume(self.snd_volume)
end

function PsyAntenna:construct()
end

function PsyAntenna:update_psy_hit()	--dt)
	local hud = get_hud()
	local custom_static = hud:GetCustomStatic("cs_psy_danger")
	if self.hit_intensity > 0.01 then
		if custom_static == nil then
--			hud:AddCustomStatic("cs_psy_danger", true)
--			hud:GetCustomStatic("cs_psy_danger"):wnd():SetTextST("st_psy_danger")
			custom_static = hud:AddCustomStatic("cs_psy_danger", true)
			custom_static:wnd():SetTextST("st_psy_danger")
		end
	else
		if custom_static ~= nil then
			hud:RemoveCustomStatic("cs_psy_danger")
		end
	end
	local TG = time_global()
	if TG - self.hit_time > 5000 then
		self.hit_time = TG
		local power = self.hit_amplitude * self.hit_intensity
		if power > 0.01 then
			local psy_hit, act	= hit(), db.actor
			psy_hit.power 		= power
			psy_hit.direction 	= vector():set(0, 0, 0)
			psy_hit.impulse 	= 0
			psy_hit.draftsman 	= act
			psy_hit.type 		= hit.telepatic	-- hit.wound
			act:hit(psy_hit)
			if act.health < 0.01 and act:alive() then
				act:kill(act)
			end
		end
	end
--	dbglog("hit_intensity = %f", self.hit_intensity)
end

function PsyAntenna:generate_phantoms()
	if self.phantom_idle == nil then
		self.phantom_idle = math.random(2000, 5000)
	end
	local TG = time_global()
	if TG - self.phantom_time > self.phantom_idle then
		local rand = math.random
		self.phantom_time = TG
		self.phantom_idle = rand(5000, 10000)
		if rand() < self.phantom_spawn_probability then
			if phantom_manager:phantom_count() < self.phantom_max then
				local radius = self.phantom_spawn_radius * (rand() / 2 + 0.5)
				local ang = self.phantom_fov * rand() - self.phantom_fov * 0.5
				local act = db.actor
				local dir = vector_rotate_y(act:direction(), ang)
				phantom_manager.spawn_phantom(act:position():add(dir:mul(radius)))
			end
		end
	end
end

function PsyAntenna:update_sound()

	if not self.sound_initialized then
		local act = db.actor
		self.sound_obj_left:play_at_pos(act, vector():set(-1, 0, 1), 0, sound_object.s2d + sound_object.looped)
		self.sound_obj_right:play_at_pos(act, vector():set( 1, 0, 1), 0, sound_object.s2d + sound_object.looped)
		self.sound_initialized = true
	end

	local vol = 1 - (self.sound_intensity ^ 3) * 0.9

	if vol < self.mute_sound_threshold then
		level.set_snd_volume(self.mute_sound_threshold)
	else
		level.set_snd_volume(vol)
	end

	self.sound_obj_left.volume = 1 / vol - 1
	self.sound_obj_right.volume = 1 / vol - 1
end

function PsyAntenna:update_postprocess(pp)

	if pp.intensity == 0 then
		self.postprocess_count = self.postprocess_count - 1
		level.remove_pp_effector(pp.idx)
		return false
	end
	
	level.set_pp_effector_factor(pp.idx, pp.intensity, 0.3)
	return true
end

function PsyAntenna:update(dt)

--	self.eff_time = self.eff_time + dt	-- nv130403 not used

	local function update_intensity(intensity_base, intensity)	-- unlocalized in vanilla
		local di = self.intensity_inertion * dt * 0.01
		local ii = intensity_base
		if math.abs(intensity_base - intensity) >= di then
			if intensity_base < intensity then
				ii = intensity - di
			else
				ii = intensity + di
			end
		end

		if ii < 0 then
			ii = 0 
		elseif ii > 1 then
			ii = 1
		end

		return ii
	end

	self:generate_phantoms()
	self.sound_intensity = update_intensity(self.sound_intensity_base, self.sound_intensity)
	self:update_sound()

	local exist
	for k, v in pairs (self.postprocess) do
		v.intensity = update_intensity(v.intensity_base, v.intensity)
		exist = self:update_postprocess(v)
		if exist == false then
			self.postprocess[k] = nil
		end
	end

	self:update_psy_hit()	--dt)
end

function PsyAntenna:save(p)
	set_save_marker(p, "save", false, "psy_antenna_obj")
--	p:w_float(self.hit_intensity)
	p:w_float(self.sound_intensity)
--	p:w_float(self.sound_intensity_base)
	p:w_float(self.mute_sound_threshold)
	p:w_u8(self.postprocess_count)
	for k, v in pairs (self.postprocess) do
		p:w_stringZ(k)
		p:w_float(v.intensity)
--		p:w_float(v.intensity_base)
		p:w_u16(v.idx)
	end
	set_save_marker(p, "save", true, "psy_antenna_obj")
end

function PsyAntenna:load(p)
	set_save_marker(p, "load", false, "psy_antenna_obj")
	-- Decane 20.11.2014: stop the hit intensity doubling after save/reload
--	self.hit_intensity = p:r_float()
	self.hit_intensity = 0
	self.sound_intensity = p:r_float()
	-- nv130403 stop the sound intensity doubling after save/reload
--	self.sound_intensity_base = p:r_float()
	self.sound_intensity_base = 0
	self.mute_sound_threshold = p:r_float()
	self.postprocess_count = p:r_u8()
	self.postprocess = {}
	for i = 1, self.postprocess_count do
		local k = p:r_stringZ()
		local ii = p:r_float()
--		local ib = p:r_float()
		local idx = p:r_u16()
		-- nv130403 stop the visual effector intensity doubling after save/reload
--		self.postprocess[k] = {intensity_base = ib, intensity = ii, idx = idx}
		self.postprocess[k] = {intensity_base = 0, intensity = ii, idx = idx}
		level.add_pp_effector(k, idx, true)
		level.set_pp_effector_factor(idx, ii)
	end
	set_save_marker(p, "load", true, "psy_antenna_obj")
end

----------------------------------------------------------------------------------------------------
-- logic for space restrictor
----------------------------------------------------------------------------------------------------

local state_outside	= 0
local state_inside	= 1
local state_void	= 2

psy_antenna = false

class "action_psy_antenna"

function action_psy_antenna:__init(obj, storage)
	self.object	= obj
	self.st		= storage
	self.state	= state_void
end

function action_psy_antenna:reset_scheme(loading)
	if self.state == state_inside then
		self:zone_leave()
	end
	self.state = state_void
	self:switch_state(db.actor)
end

function action_psy_antenna:deactivate()
	if self.state == state_inside then
		self:zone_leave()
	end
end

function action_psy_antenna:update(delta)
	local actor = db.actor
	if xr_logic.try_switch_to_another_section(self.object, self.st, actor) then
		return
	end
	self:switch_state(actor)
end

function action_psy_antenna:switch_state(actor)
	if self.state ~= state_inside then
		if self.object:inside(actor:position()) then
			self:zone_enter()
			return
		end
	else
		if not self.object:inside(actor:position()) then
			self:zone_leave()
			return
		end
	end
end

function action_psy_antenna:zone_enter()

	self.state = state_inside

	psy_antenna.sound_intensity_base = psy_antenna.sound_intensity_base + self.st.intensity
	psy_antenna.mute_sound_threshold = psy_antenna.mute_sound_threshold + self.st.mute_sound_threshold
	psy_antenna.hit_intensity = psy_antenna.hit_intensity + self.st.hit_intensity
	psy_antenna.phantom_spawn_probability = psy_antenna.phantom_spawn_probability + self.st.phantom_prob

	local postproc = self.st.postprocess
	if postproc == "nil" then
		return
	end

	if psy_antenna.postprocess[postproc] == nil then
		psy_antenna.postprocess_count = psy_antenna.postprocess_count + 1
		local l_idx = 1500 + psy_antenna.postprocess_count
		psy_antenna.postprocess[postproc] = {intensity_base = 0, intensity = 0, idx = l_idx}
		level.add_pp_effector(postproc, l_idx, true)
		level.set_pp_effector_factor(l_idx, 0.01)
	end

	psy_antenna.postprocess[postproc].intensity_base = psy_antenna.postprocess[postproc].intensity_base + self.st.intensity		
end

function action_psy_antenna:zone_leave()

	self.state = state_outside

	psy_antenna.sound_intensity_base = psy_antenna.sound_intensity_base - self.st.intensity
	psy_antenna.mute_sound_threshold = psy_antenna.mute_sound_threshold - self.st.mute_sound_threshold
	psy_antenna.hit_intensity = psy_antenna.hit_intensity - self.st.hit_intensity
	psy_antenna.phantom_spawn_probability = psy_antenna.phantom_spawn_probability - self.st.phantom_prob

	local postproc = self.st.postprocess
	if postproc == "nil" then
		return
	end

	if psy_antenna.postprocess[postproc] ~= nil then
--		psy_antenna.postprocess[postproc].intensity_base = psy_antenna.postprocess[postproc].intensity_base - self.st.intensity
		local new_base = psy_antenna.postprocess[postproc].intensity_base - self.st.intensity
		psy_antenna.postprocess[postproc].intensity_base = new_base < 0.001 and 0 or new_base
--		dbglog("intensity_base = %f, intensity = %f, self.st.intensity = %f", psy_antenna.postprocess[postproc].intensity_base, psy_antenna.postprocess[postproc].intensity, self.st.intensity)
	end
end

function action_psy_antenna:save()
end

---------------------------------------------------------------------------------------------------------------------

function save(p)
	set_save_marker(p, "save", false, "sr_psy_antenna")
	if psy_antenna and not utils.level_changing() then
		p:w_bool(true)
		psy_antenna:save(p)
	else
		p:w_bool(false)
	end
	set_save_marker(p, "save", true, "sr_psy_antenna")
end

function load(p)
	set_save_marker(p, "load", false, "sr_psy_antenna")
	local b = p:r_bool()
	if b then
		if psy_antenna then
			abort("sr_psy_antenna.psy_antenna already exists!")
			return
		end
		psy_antenna = PsyAntenna()
		psy_antenna:construct()
		psy_antenna:load(p)
	end
	set_save_marker(p, "load", true, "sr_psy_antenna")
end

function add_to_binder(npc, ini, scheme, section, storage)
	if not psy_antenna then
		psy_antenna = PsyAntenna()
		psy_antenna:construct()
	end
	local new_action = action_psy_antenna(npc, storage)
	xr_logic.subscribe_action_for_events(npc, storage, new_action)
end

function set_scheme(npc, ini, scheme, section)	--, gulag_name)
	local st		= xr_logic.assign_storage_and_bind(npc, ini, scheme, section)
	st.logic		= xr_logic.cfg_get_switch_conditions(ini, section, npc)
	st.intensity		= utils.cfg_get_number(ini, section, "eff_intensity", npc, true) * 0.01
	st.postprocess		= utils.cfg_get_string(ini, section, "postprocess", npc, false, "", "psy_antenna.ppe")
	st.hit_intensity	= utils.cfg_get_number(ini, section, "hit_intensity", npc, true) * 0.01
	st.phantom_prob		= utils.cfg_get_number(ini, section, "phantom_prob",  npc, false, 0) * 0.01
	st.mute_sound_threshold	= utils.cfg_get_number(ini, section, "mute_sound_threshold",  npc, false, 0)
end
-- memtsg = {}
-- lasthealth = 0
-- lastime = nil
local bloodsuckers_restr = {}
bloodsucker_zone_enter = {}

----------------------------------------------------------------------------------------------------------------------

class "motivator_binder" (object_binder)

function motivator_binder:__init(obj) super(obj)
	self.loaded = false
	self.last_update = 0
	self.first_update = false
--	self.treasure_processed = false
--	self.now_in_combat = false
	self.strelok_particles_added = false
end

function motivator_binder:extrapolate_callback(cur_pt)
	local sobj = self.object
	local self_st = self.st
	if self_st.active_section then
		xr_logic.issue_event(sobj, self_st[self_st.active_scheme], "extrapolate_callback")
		self_st.move_mgr:extrapolate_callback(sobj)
	end
--[[
	if patrol(sobj:patrol()):flags(cur_pt):get() == 0 then
		return true
	end
	return false
]]
	return patrol(sobj:patrol()):flags(cur_pt):get() == 0
end

function motivator_binder:reinit()
	object_binder.reinit(self)
	local t = {followers = {}}
	local sobj = self.object
	db.storage[sobj:id()] = t
	self.st = t
	t.state_mgr = state_mgr.bind_manager(sobj)
	t.move_mgr = move_mgr.move_mgr(sobj)
	t.move_mgr:initialize()
end

----------------------------------------------------------------------------------------------------------------------

local dummy_ini = ini_file("scripts\\dummy.ltx")

function motivator_binder:net_spawn(sobject)

	local sobj = self.object
--	local ppos = sobj:position()
	local id = sobj:id()

--	xrs_dyn_music.npc_table[id] = sobj
	xrs_dyn_music.add_object(sobj)

	if not object_binder.net_spawn(self, sobject) then
		return false
	end

	db.storage[id].squad_obj = sim_board.get_sim_board().squads[alife():object(id).squad_id]

	db.add_obj(sobj)

	sobj:set_patrol_extrapolate_callback(motivator_binder.extrapolate_callback, self)
	sobj:set_callback(callback.hit, motivator_binder.hit_callback, self)
	sobj:set_callback(callback.death, motivator_binder.death_callback, self)
	sobj:set_callback(callback.use_object, motivator_binder.use_callback, self)
	sobj:apply_loophole_direction_distance(1)

	if self.loaded == false then

		local char_ini = ""
		local spawn_ini = sobj:spawn_ini()
		local filename = nil

		if spawn_ini then
			filename = utils.cfg_get_string(spawn_ini, "logic", "cfg", sobj, false, "")
		end

		if filename ~= nil then
			char_ini = ini_file(filename)
		else
			char_ini = spawn_ini or dummy_ini
		end

		xr_info.loadInfo(sobj, char_ini)
	end

	if not sobj:alive() then
		return true
	end

	local relation = db.goodwill.relations and db.goodwill.relations[id]
	if relation ~= nil then
		if db.actor then
			game_relations.set_npcs_relation(sobj, db.actor, relation)
		end
	end

	local sympathy = db.goodwill.sympathy and db.goodwill.sympathy[id]
	if sympathy ~= nil then
		game_relations.set_npc_sympathy(sobj, sympathy)
	end

	game_relations.set_level_faction_community(sobj)

	db.add_enemy(sobj)

	self.e_index = db.heli_enemy_count - 1

	sound_theme.init_npc_sound(sobj)

	local manager = sobj:motivation_action_manager()
	manager:remove_evaluator(stalker_ids.property_anomaly)
	manager:add_evaluator(stalker_ids.property_anomaly, property_evaluator_const(false))

	xr_smartcover.init_global_evaluators(sobj)

	smart_terrain.setup_gulag_and_logic_on_spawn(sobj, self.st, sobject, modules.stype_stalker, self.loaded)

	bloodsucker_reaction.add_bloodsucker_reactions(sobj)

	actor_reaction.add_actor_reactions(sobj)

	if sobj:character_community() ~= "zombied" then
		post_combat_idle.add_post_combat_idle(sobj)
	end

	sobj:group_throw_time_interval(2000)

	if sobj:profile_name() == "stc_strelok" then
		stc_strelok_health_manager.cs_strelok_health(sobj)
	end

	return true
end

function motivator_binder:net_destroy()

	local sobj = self.object
	local id = sobj:id()

--	xrs_dyn_music.npc_table[id] = nil
--	xrs_dyn_music.stop_combat(id)
	xrs_dyn_music.remove_object(id)
	xr_sound.stop_sounds_by_id(id)

	local st = db.storage[id]
	if st.active_scheme then
		xr_logic.issue_event(sobj, st[st.active_scheme], "net_destroy", sobj)
	end

	db.del_obj(sobj)

	db.storage[id] = nil

	self:clear_callbacks()
	sobj:set_callback(callback.use_object, nil)	-- SRP

	if self.e_index ~= nil then
		db.delete_enemy(self.e_index)
	end

	if sobj:profile_name() == "stc_strelok" then
		stc_strelok_health_manager.remove_health_bar()
	end

	object_binder.net_destroy(self)
end

function motivator_binder:clear_callbacks()
	local sobj = self.object
	sobj:set_patrol_extrapolate_callback(nil)
	sobj:set_callback(callback.hit, nil)
	sobj:set_callback(callback.death, nil)
	-- sobj:set_callback(callback.use_object, nil)
end

function motivator_binder:hit_callback(obj, amount, local_direction, who, bone_index)

	if obj:profile_name() == "stc_strelok" then
		stc_strelok_health_manager.hit_callback(obj, who, amount)
	end

	local sobj = self.object
	local self_st = self.st

	if self_st.active_section then
		xr_logic.issue_event(sobj, self_st[self_st.active_scheme], "hit_callback", obj, amount, local_direction, who, bone_index)
	end

	local temp_var = self_st.combat_ignore
	if temp_var then
		xr_logic.issue_event(sobj, temp_var, "hit_callback", obj, amount, local_direction, who, bone_index)
	end

	temp_var = self_st.combat
	if temp_var then
		xr_logic.issue_event(sobj, temp_var, "hit_callback", obj, amount, local_direction, who, bone_index)
	end

	temp_var = self_st.hit
	if temp_var then
		xr_logic.issue_event(sobj, temp_var, "hit_callback", obj, amount, local_direction, who, bone_index)
	end

	if amount > 0 then
		local id = sobj:id()
--		sr_territory.issue_event(sobj, "hit_callback", obj, amount, local_direction, who, bone_index)
		xr_wounded.hit_callback(id)
		sim_combat.hit_callback(id, who:id())
	end
end

function motivator_binder:death_callback(victim, who)

	local sobj = self.object
	local id = sobj:id()

--	xrs_dyn_music.stop_combat(id)	--' Distemper 03.2008
	xrs_dyn_music.remove_object(id)

	local st = db.storage[id]

	stalker_generic.remove_level_spot(sobj, st)

	if who:id() == db.actor:id() then
		xr_statistic.addKillCount(sobj)
		xr_statistic.inc_killed_stalkers_counter()
	end

	local st_ini = st.ini
	local known_info = utils.cfg_get_string(st_ini, st.section_logic, "known_info", sobj, false, "", nil)

	xr_info.loadInfo(sobj, st_ini, known_info)

	local self_st = self.st

	local self_st_death = self_st.death
	if self_st_death then
		xr_logic.issue_event(sobj, self_st_death, "death_callback", victim, who)
	end

	if self_st.active_section then
		xr_logic.issue_event(sobj, self_st[self_st.active_scheme], "death_callback", victim, who)
	end

--	sr_territory.issue_event(sobj, "death_callback", victim, who)

	sr_light.check_light(sobj)

	death_manager.drop_manager(sobj):create_release_item()

	db.delete_enemy(self.e_index)

	self:clear_callbacks()

	bloodsucker_reaction.disable_bloodsucker_reaction(sobj)
--[[
	if actor_stats.remove_from_ranking ~= nil then
		local community = sobj:character_community()
		if community ~= "zombied" then
			if community ~= "monolith" then
				actor_stats.remove_from_ranking(id)
			end
		end
	end
]]
	release_body_manager.moving_dead_body(sobj) --' Distemper 11.02.2008
end

function motivator_binder:use_callback(obj, who)
	local sobj = self.object
	if sobj:alive() then
		trade_manager.update(sobj)
		dialog_manager.restore_certain_disabled_phrases(sobj)
		inventory_upgrades.need_victim(obj) --' Distemper 03.2008
		xr_use.notify_on_use(obj, who)
		local self_st = self.st
		if self_st.active_section then
			xr_logic.issue_event(sobj, self_st[self_st.active_scheme], "use_callback", obj, who)
		end
	else
		local se_obj = alife():object(sobj:id())
		if se_obj ~= nil and se_obj.treasure_processed ~= true then
			treasure_manager.use(sobj)
			se_obj.treasure_processed = true
		end
	end
end

function motivator_binder:update(delta)

	object_binder.update(self, delta)

	local sobj = self.object
	local id = sobj:id()

	if bind_stalker.to_delayed_alife_release_objects[id] == true then
		local sim = alife()
		sim:release(sim:object(id), true)
		bind_stalker.to_delayed_alife_release_objects[id] = nil
		return
	end

	local object_alive = sobj:alive()
	local actor = db.actor
	local st = db.storage[id]
	local st_combat = st.combat

	if sobj:profile_name() == "stc_strelok" then		-- flipped this and the next line around
		if not self.strelok_particles_added then
			sobj:start_particles("monsters\\polter_idle", "bip01_head")
			self.strelok_particles_added = true
		end
	end

	if st ~= nil and st.active_scheme ~= nil and object_alive then
		local switched = false
		local manager = sobj:motivation_action_manager()
		if manager:initialized() and manager:current_action_id() == stalker_ids.action_combat_planner then
			local overrides = xr_logic.generic_scheme_overrides(sobj)
			if overrides then
				if overrides.on_combat then
					xr_logic.pick_section_from_condlist(actor, sobj, overrides.on_combat.condlist)
				end
				if st_combat and st_combat.logic and not xr_logic.try_switch_to_another_section(sobj, st_combat, actor) then
					if overrides.combat_type then
						set_combat_type(sobj, actor, overrides)
					end
				else
					switched = true
				end
			else
				set_combat_type(sobj, actor, st_combat)
			end
		end
		if not switched then
			xr_logic.try_switch_to_another_section(sobj, st[st.active_scheme], actor)
		end
	else
		xr_combat.set_combat_type(sobj, actor, st_combat)
	end

	if self.first_update == false then
		if object_alive == false then
			death_manager.drop_manager(sobj):create_release_item()
		end
		self.first_update = true
	end

	local global_time = time_global()
	if global_time - self.last_update > 1000 then
		sr_light.check_light(sobj)
		self.last_update = global_time
	end

	local sobj_pos = sobj:position()
	for k, v in pairs (bloodsuckers_restr) do
		if v:inside(sobj_pos) and object_alive then
			if bloodsucker_zone_enter[k] == nil then
				bloodsucker_zone_enter[k] = sobj
			end
		else
			if bloodsucker_zone_enter[k] ~= nil then
				bloodsucker_zone_enter[k] = nil
			end
		end
	end

	local self_st = self.st

	self_st.active_sector = sr_danger.select_active_sectors(sobj)

	if self_st.state_mgr then
		if object_alive then
			self_st.state_mgr:update()
--			if self_st.state_mgr.combat == false and self_st.state_mgr.alife == false then
--				trade_manager.update(sobj)
--			end
		else
			self_st.state_mgr = nil
		end
	end

	if object_alive then
		xr_sound.update(id)
	end

	local squad = st.squad_obj
	if squad ~= nil then
		if squad.commander_id == id then
			squad:update()
		end
	end

	if object_alive then
		if sobj:is_talk_enabled() then
			sobj:set_tip_text("character_use")
		else
			sobj:set_tip_text("")
		end
	else
		sobj:set_tip_text_default()
	end
end

function motivator_binder:reload(section)
	object_binder.reload(self, section)
end

function motivator_binder:net_save_relevant()
	return true
end

function motivator_binder:save(packet)

	set_save_marker(packet, "save", false, "motivator_binder")

	object_binder.save(self, packet)

	local sobj = self.object

	if sobj:profile_name() == "stc_strelok" then
		stc_strelok_health_manager.save(packet)
	end

--	packet:w_bool(self.treasure_processed)

	xr_logic.save_obj(sobj, packet)

--	trade_manager.save(sobj, packet)

	-- treasure_manager.save(packet)

	local sid = sobj:id()

	xr_sound.save_npc(packet, sid)

--	dialog_manager.save_npc(packet, sid)

	set_save_marker(packet, "save", true, "motivator_binder")
end

function motivator_binder:load(reader)

	self.loaded = true

	set_save_marker(reader, "load", false, "motivator_binder")

	object_binder.load(self, reader)

	local sobj = self.object

	if sobj:profile_name() == "stc_strelok" then
		stc_strelok_health_manager.load(reader)
	end

--	self.treasure_processed = reader:r_bool()

	xr_logic.load_obj(sobj, reader)

--	trade_manager.load(sobj, reader)

	-- treasure_manager.load(reader)

	local sid = sobj:id()

	xr_sound.load_npc(reader, sid)

--	dialog_manager.load_npc(reader, sid)

	set_save_marker(reader, "load", true, "motivator_binder")
end
--[[
function motivator_binder:hear_callback(self, who, sound_type, sound_position, sound_power)

	if who:id() == self:id() then
		return
	end

	local type = "NIL"

	if bit_and(sound_type, snd_type.weapon) == snd_type.weapon then

		type = "WPN"
		if bit_and(sound_type, snd_type.weapon_shoot) == snd_type.weapon_shoot then
			type = "WPN_shoot"
		elseif bit_and(sound_type, snd_type.weapon_empty) == snd_type.weapon_empty then
			type = "WPN_empty"
		elseif bit_and(sound_type, snd_type.weapon_bullet_hit) == snd_type.weapon_bullet_hit then
			type = "WPN_hit"
		elseif bit_and(sound_type, snd_type.weapon_reload) == snd_type.weapon_reload then
			type = "WPN_reload"
		end

	elseif bit_and(sound_type, snd_type.item) == snd_type.item then

		type = "ITM"
		if bit_and(sound_type, snd_type.item_pick_up) == snd_type.item_pick_up then
			type = "ITM_pckup"
		elseif bit_and(sound_type, snd_type.item_drop) == snd_type.item_drop then
			type = "ITM_drop"
		elseif bit_and(sound_type, snd_type.item_hide) == snd_type.item_hide then
			type = "ITM_hide"
		elseif bit_and(sound_type, snd_type.item_take) == snd_type.item_take then
			type = "ITM_take"
		elseif bit_and(sound_type, snd_type.item_use) == snd_type.item_use then
			type = "ITM_use"
		end

	elseif bit_and(sound_type, snd_type.monster) == snd_type.monster then

		type = "MST"
		if bit_and(sound_type, snd_type.monster_die) == snd_type.monster_die then
			type = "MST_die"
		elseif bit_and(sound_type, snd_type.monster_injure) == snd_type.monster_injure then
			type = "MST_damage"
		elseif bit_and(sound_type, snd_type.monster_step) == snd_type.monster_step then
			type = "MST_step"
		elseif bit_and(sound_type, snd_type.monster_talk) == snd_type.monster_talk then
			type = "MST_talk"
		elseif bit_and(sound_type, snd_type.monster_attack) == snd_type.monster_attack then
			type = "MST_attack"
		elseif bit_and(sound_type, snd_type.monster_eat) == snd_type.monster_eat then
			type = "MST_eat"
		end
	end
end
]]
function AddToMotivator(npc)
	if alife() then
		npc:bind_object(this.motivator_binder(npc))
	end
end

function addCommonPrecondition(action)
	-- action:add_precondition (world_property(xr_evaluators_id.reaction, false))
	action:add_precondition (world_property(xr_evaluators_id.stohe_meet_base + 1, false))
	action:add_precondition (world_property(xr_evaluators_id.sidor_wounded_base + 0, false))
	-- action:add_precondition (world_property(xr_evaluators_id.chugai_heli_hunter_base, false))
	action:add_precondition (world_property(xr_evaluators_id.abuse_base, false))
end

function register_bloodsucker_restr(obj)
	bloodsuckers_restr[obj:id()] = obj
end
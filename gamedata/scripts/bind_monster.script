-----------------------------------------------------------------------------------
-- Monster binding
-----------------------------------------------------------------------------------

local object_binder_update = object_binder.update

function bind(obj)
	local new_binder = generic_object_binder(obj)
	obj:bind_object(new_binder)
end

-- local last_update = 0 -- combat

------------------------------------------------------------------------------------

local callback_patrol_path_in_point = callback.patrol_path_in_point
local callback_hit = callback.hit
local callback_death = callback.death

class "generic_object_binder" (object_binder)

function generic_object_binder:__init(obj) super(obj)
	self.loaded = false
	self.first_update_done = false
	self.death_recorded = false
	self.is_trader = obj:clsid() == clsid.script_trader
end

function generic_object_binder:reload(section)
	object_binder.reload(self, section)
end

function generic_object_binder:reinit()

	object_binder.reinit(self)

	local sobj = self.object

	if not self.is_trader then
		sobj:set_patrol_extrapolate_callback(generic_object_binder.extrapolate_callback, self)
	end

	local t = {}

	db.storage[sobj:id()] = t

	self.st = t

	sobj:set_callback(callback_patrol_path_in_point, self.waypoint_callback, self)
	sobj:set_callback(callback_hit, self.hit_callback, self)
	sobj:set_callback(callback_death, self.death_callback, self)
end

function generic_object_binder:update(delta)

	object_binder_update(self, delta)

	if self.death_recorded == true then
		return
	end

	local sobj = self.object

	if not self.first_update_done then
		local sobj_id = sobj:id()
		if bind_stalker.delayed_alife_release_objects[sobj_id] == true then
			local sim = _G.sim
--			dbglog("[bind_monster.update]: Releasing "..sobj_id)
			sim:release(sim:object(sobj_id), true)
			bind_stalker.delayed_alife_release_objects[sobj_id] = nil
			return
		end
		if self.is_trader and sobj:alive() then
			trade_manager.update(sobj)
		end
		self.first_update_done = true
	end

	local self_st = self.st

	if sobj:alive() then

		if sobj:is_talk_enabled() then
			sobj:set_tip_text("character_use")
		else
			sobj:set_tip_text("")
		end

		local active_scheme = self_st.active_scheme
		if active_scheme ~= nil then
			xr_logic.try_switch_to_another_section(sobj, self_st[active_scheme], db.actor)
		end

		local squad = self_st.squad_obj
		if squad ~= nil then
			if squad.commander_id == sobj:id() then
				squad:update()
			end
		end
	else
		sobj:set_tip_text_default()
		self.death_recorded = true
	end

	if self_st.active_section ~= nil then
		xr_logic.issue_event(sobj, self_st[self_st.active_scheme], "update", delta)
	end
end

function generic_object_binder:extrapolate_callback()

	local sobj = self.object
	local sobj_st = db.storage[sobj:id()]

	if sobj_st == nil or sobj_st.object == nil then
		return
	end

	if sobj:get_script() == false then
		return false
	end

	local patrol_path = sobj:patrol()

	if not level.patrol_path_exists(patrol_path) then
		return false
	end

	return patrol(patrol_path):flags(sobj:get_current_point_index()):get() == 0
end

function generic_object_binder:waypoint_callback(obj, action_type, index)
	local self_st = self.st
	if self_st.active_section ~= nil then
		xr_logic.issue_event(obj, self_st[self_st.active_scheme], "waypoint_callback", obj, action_type, index)
	end
end

function generic_object_binder:death_callback(victim, culprit)

	if culprit:id() == db.actor:id() then
		xr_statistic.addKillCount(victim)
		xr_statistic.inc_killed_monsters_counter()
	end

	local self_st = self.st
	local mob_death = self_st.mob_death

	if mob_death then
		xr_logic.issue_event(victim, mob_death, "death_callback", victim, culprit)
	end
--[[
	The if-statement below is superfluous in vanilla as there are no schemes in vanilla that:

	(i) have a death_callback
	(ii) apply to entities that have bind_monster as their object binder (traders and mutants)

	Mob_death is an exception but anyway gets its own explicit death_callback call above.
	Despite the superfluity, we leave the if-statement uncommented, as otherwise modders who
	add such a scheme to the game would need to remember to uncomment the statement below.
	Without doing so, their scheme's death_callback would not fire.
]]
	if self_st.active_section then
		xr_logic.issue_event(victim, self_st[self_st.active_scheme], "death_callback", victim, culprit)
	end
--[[
	local h = hit()
	h.draftsman = victim
	h.type = hit.fire_wound
	h.direction = db.actor:position():sub(victim:position())
	h:bone("pelvis")
	h.power = 1
	h.impulse = 10
	victim:hit(h)
]]
	victim:set_patrol_extrapolate_callback(nil)             -- SRP
	victim:set_callback(callback_patrol_path_in_point, nil) -- SRP
	victim:set_callback(callback_hit, nil)                  -- SRP
	victim:set_callback(callback_death, nil)                -- SRP
--[[
	-- This could fire before se_monster:on_death() does and calls on_npc_death().
	-- In that case, the death of a squad poltergeist would not be processed correctly.
	if victim:clsid() == clsid.poltergeist_s then
		local sim = alife()
		local sim_obj = sim:object(victim:name())
		if sim_obj ~= nil then
			sim:release(sim_obj, true)
		end
	end
]]
end

function generic_object_binder:hit_callback(victim, amount, local_direction, hitter, bone_index)

	local self_st_hit = self.st.hit

	if self_st_hit then
		xr_logic.issue_event(victim, self_st_hit, "hit_callback", victim, amount, local_direction, hitter, bone_index)
	end

	if amount > 0 then
		if hitter:id() == db.actor:id() then
			sim_combat.hit_callback(victim:id())
		end
	end
--[[
	if string.find(victim:name(), "bloodsucker_jumper") ~= nil then
		if hitter:id() ~= db.actor:id() then
			victim.health = victim.health + amount
		end
	end
]]
end

local stype_mobile = modules.stype_mobile

function generic_object_binder:net_spawn(sobject)

	if not object_binder.net_spawn(self, sobject) then
		return false
	end

	local sobj = self.object

	if not sobj:alive() then
		return true
	end

	local sim_obj = _G.sim:object(sobj:id())

	if sim_obj == nil then
		return false
	end

	local self_st = self.st

	self_st.squad_obj = sim_board.get_sim_board().squads[sim_obj.squad_id]

	db.add_obj(sobj)

	if self.is_trader then
		smart_terrain.setup_gulag_and_logic_on_spawn(sobj, self_st, sim_obj, modules.stype_trader, self.loaded)
	else
		smart_terrain.setup_gulag_and_logic_on_spawn(sobj, self_st, sim_obj, stype_mobile, self.loaded)
	end

	return true
end

function generic_object_binder:net_destroy()

	local sobj = self.object

	sobj:set_patrol_extrapolate_callback(nil) -- SRP
	sobj:set_callback(callback_patrol_path_in_point, nil)
	sobj:set_callback(callback_hit, nil)
	sobj:set_callback(callback_death, nil)

	local sobj_id = sobj:id()

	xr_sound.stop_sounds_by_id(sobj_id)

	local self_st = self.st

	if self_st.active_scheme then
		xr_logic.issue_event(sobj, self_st[self_st.active_scheme], "net_destroy")
	end

--	db.del_obj(sobj) -- done below
	db.storage[sobj_id] = nil

	object_binder.net_destroy(self)
end
--[[
function generic_object_binder:reload(section) -- duplicate
	object_binder.reload(self, section)
end
]]
function generic_object_binder:net_save_relevant()
	return true
end

function generic_object_binder:save(packet)
	set_save_marker(packet, "save", false, "generic_object_binder")
	object_binder.save(self, packet)
	xr_logic.save_obj(self.object, packet)
--	if self.is_trader then
--		trade_manager.save(self.object, packet)
--	end
	set_save_marker(packet, "save", true, "generic_object_binder")
end

function generic_object_binder:load(reader)
	self.loaded = true
	set_save_marker(reader, "load", false, "generic_object_binder")
	object_binder.load(self, reader)
	xr_logic.load_obj(self.object, reader)
--	if self.is_trader then
--		trade_manager.load(self.object, reader)
--	end
	set_save_marker(reader, "load", true, "generic_object_binder")
end